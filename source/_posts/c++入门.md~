---
style: summer

title: c++入门

tags:
  - c++
  - gcc
  - gdb
  - c
  - vector
---


读《c++ primer》，刷LeetCode，看coolshell就是我自学c++的血泪史。
为什么是说‘自学’呢？因为学校教的时候我在玩，学校不教了，我才明白
自己啥也不会！没办法，只知道一本经典教材《c++ primer》，
反复看，做习题，结合从学长学姐那里听来的四字真言‘力特扣的’，
还是顺利过了研究生入学的机试，也顺利找到了第一份实习。
这是第一篇，主要数一下在刷题过程中常用的一些技巧。

<!-- more -->

---

#### 使用浮点数要注意的坑

* 浮点数转换为int
   * 下行转换
	    ```c++
	    float x;
	    int target = int(x);
	    // 普通的强制转换
	    ```

   * 几舍几入
        ```c++
        float x;
        int target = int(x + 0.5);  // 四舍五入
        int target = int (x + 0.7); // 二舍三入
        ```

   * 上行转换
        ```c++
        #include <cmath>
        float x;
        int target = ceil(x);
        ```

* 浮点数由于精度比较低，不能直接用`==`进行相等判别，
而是要以一个非常小的数作为边界来比较

---


#### vector与数组

* 关于`vector`，清华学霸的经验帖写的很棒：

    * [小唯-THU的vector总结](http://www.cnblogs.com/wei-li/archive/2012/06/08/2541576.html)

    **PS**: 这个学霸的python下matplotlib使用总结写的也非常棒！ 

* 数组：

    * 虽然vector确实好用，为了美化代码、简化逻辑，有时候还是会用到数组，如DP相关的算法题。
	数组经常和`memset`方法一起用
	```c++
	int a[10000];
	memset(a, 0, sizeof(a));
	```

---

#### auto关键字

* auto关键字可以让编译器做类型推导，还可以通过加`&`实现引用类型推导，
写过较为复杂的迭代器的朋友一定记得被迭代器类型名称支配的恐惧！好在auto关键字拯救了我们！

    ```c++
    vector<vector<int> > res;
    for (auto vec: res) {
        vec.push_back(1);
    }
    // 这种方式不能达到修改res的目的！
    // 因为vec是复制生成的新的临时变量！

	for (auto &vec: res) {
		vec.push_back(1)
	}
    // 这种方式可以修改res，`auto`关键字的作用是编译器做类型推导，
	// 常用于迭代器遍历数组。上面的例子也能体现auto关键字的强大

	for (auto iter = res.begin(); iter != res.end(); iter++) {
		iter->push_back(1)
	}
    ```

---


#### 使用C的内容

* 使用C标准库
    ```c
    # include <cstdio>
    // 不使用 #include<stdio.h>
    // 前者是后者的模板化版本，也是标准的C++版本。
	// 其他C标准库的命名规则同。
    // 这样就可以使用C的输入输出函数如
    // printf.


    #include <cstdlib>
	// 不使用#inlcude <stdlib.h>.
    // 这样就可使用system("PAUSE") .
    ```

---

#### c++与java中字符串取子串函数的区别

* c++

	```cpp
    string str("hello world");
	// 函数原型: string.substr(start_index, len = end_index)
	s = str.substr(1)  // s: "ello world"
	s = str.substr(0, 5)  // s: "hello"
	```

* java

	```java
	String str = new String("hello world");
	// 函数原型: String.substring(start_index, end_index)
	String s = str.substring(0, 5);
	// s: "hello"
	```

----


#### C++ 标准算法库

* 头文件
	~~~c++
	#include<algorithm>
	~~~

* 排列函数

	```c++
	next_permutation(beg, end)
	next_permutation(beg, end, comp)
	```

	输入两个迭代器，可以指定比较函数。
序列的所有排列可以规定次序。如123在132前，acb在bac前。
调用这一函数时，函数调整输入序列的顺序，生成下一个排列。
如果序列已经是最后一个排列中，则`next_permutation`
将序列重新排列为最低排列并返回`false`；否则，
它将输入序列变换为下一个排列，即字典序的下一个排列，并返回`true`。


* 排序函数
只能用于顺序容器如vector，deque，list，不能用于键值对容器，
这和Python中的`sorted`函数的限制是一致的。

```c++
sort(beg, end)
//实际是快排,平均时间复杂度为N log(N)。

sort(beg, end, comp)
// comp是函数或者函数指针，签名是 
//   bool comp(elem_type first_arg, elem_type second_arg)，
// 返回的bool值的含义是第一个参数是否应该排在第二个参数的前面。

stable_sort (beg,  end)
//实际是归并排序,在空间足够的情况下时间复杂度为N log(N)。
stable_sort(beg, end, comp)
```

---


## C和C++风格的示例代码：

```c++
int a[] = {1, 2, 3};
while (1)
{
    cout << a[0] << a[1] << a[2] << endl;
    if (!next_permutation(a, a + 3)){
        break;
    }
}

vector<string> vecStr{"abc", "xyz", "aeiou"};
while (1)
{
    cout << vecStr[0] << vecStr[1] << vecStr[2] << endl;
    if (!next_permutation(vecStr.begin(), vecStr.end())) {
        break;
    }

}
```
C风格的代码可以显著快于C++风格的代码。


## min、max
```c++
min_element(beg, end)
min_element (beg, end, comp)
max_element (beg, end)
max_element (beg, end, comp)
// 可输入数组指针，也可输入迭代器。
// 输入指针就返回指针，输入迭代器就返回迭代器。
// 另有类似的min和max函数，只能输入迭代器，不能输入指针。
```

## 二分搜索函数

```c++
lower_bound(beg, end, val)
lower_bound(beg, end, val, comp)
// lower_bound得到大于等于val的第一个元素的迭代器

upper_bound(beg, end, val)
upper_bound(beg, end, val, comp)
// upper_bound得到大于val第一个元素的迭代器
// 输入的数据必须是有序的。


// 若搜索不到，则返回最后一个元素的下一个元素的迭代器，即end()迭代器。
```
```c++
vector<int> vec = { 1, 2, 3, 4, 4, 5, 7, 8 };
auto it = upper_bound(vec.begin(), vec.end(), 4);
printf("%d", it - vec.begin());
// 输出为5。
```

---


## 杂项

只有进行字符串匹配时考虑用find进行搜索，其他情况都用lower_bound和upper_bound进行搜索。

有序序列集合运算
参见《C++ Primer》
一般般，不是特别好用，得到的结果可能和预期的不一样。


----

## istringstream类

* 问题
	stringstream不主动释放内存(或许是为了提高效率)，如果在程序中用同一个流，反复读写大量的数据，将会造成大量的内存消耗，这时候，需要适时地用 

    ```stream.str("")```

 	清除一下缓冲,具体的例子见链接：[stream大坑脱坑详细指南](http://blog.csdn.net/chjp2046/article/details/5460462)

---

* 指针失效问题：

   跟python的迭代器不同的是，c++的istringstream的指针在子函数修改istringstream之后，父函数的指针会失效，这时候需要调用

    ```cpp
    stream.clear();
    ```
   使指针得到正确值！

---

## 数值类型转到string类型

使用 ==`to_string()`== 函数，有多种重载方式，可以基本可以覆盖所有数值类型。
```
string to_string (int val);
string to_string (long val);
string to_string (long long val);
string to_string (unsigned val);
string to_string (unsigned long val);
string to_string (unsigned long long val);
string to_string (float val);
string to_string (double val);
string to_string (long double val);
```
---

## C风格字符串转到数值类型：

使用`atoi()`，`atof()`, `atol()`, 和`atoll()`等，意思是将ASCII码转换为int,float,long或者long long等类型。
函数原型如下：
```
int atoi (const char * str);
double atof (const char* str);
long int atol (const char * str );
long long int atoll (const char * str);
```
## string类型转到数值类型

```cpp
double stod (const string&  str, size_t* idx = 0);
float stof (const string&  str, size_t* idx = 0);
int stoi (const string&  str, size_t* idx = 0, int base = 10);
long stol (const string&  str, size_t* idx = 0, int base = 10);
long double stold (const string&  str, size_t* idx = 0);
long long stoll (const string&  str, size_t* idx = 0, int base = 10);
unsigned long stoul (const string&  str, size_t* idx = 0, int base = 10);
unsigned long long stoull (const string&  str, size_t* idx = 0, int base = 10);
```
这套函数和`to_string()`函数体系是对应的 ！

string类型可以先用`str.c_str()`将string对象转到C风格字符串再将C风格字符串转到数值类型，但是显然使用专门的将string类对象转到各种数值类型的函数更符号C++程序员的逼格！


-----

## 《C++ Primer》阅读笔记

### 内联函数

	C++讲究效率，内联函数指的是那些本身代码块比较小，但是运行时调用次数比较多的函数。如果不把这些函数设置为内联函数，调用的开销太大了！于是就想到把这些函数直接安插在主函数中，避免调用  以提高效率。但是现在的编译器相当智能，能自动统计函数的执行次数，会自己把相应的函数设置为内联函数。要注意的是：

1.  在类定义中（.h文件才有类定义）定义（不是声明）的函数默认为内联函数
2.  内联函数必须在 .h 文件中定义（不只是声明），因为编译器要知道内联函数的完整代码  才能在编译时把内敛函数的调用转化为真正的代码块
3.  内联函数的关键字（inline）对编译器而言只是一个建议，编译器是否采用还要看编译器的统计结果，即这里编译器其实有很大的发挥空间！
4.  内联的建议的发出有两种方式：一是用关键字inline声明，二是在类的声明体中直接定义函数。
5.  必须小心内联，因为内联函数的小小的改变会可能会导致大量代码的更改，这样很多依赖文件不得不重新编译，使得构建过程和编译过程不再独立（变得冗长）。


### fun出的c++算法题

1. 哈弗曼编码（基本版）  （moderate）

	* 输入：一个仅包含英文字母的文本文件
	
	* 输出：哈弗曼编码方案，即每个字母对应的二进制哈弗曼编码（10,110 ...）

2. 哈弗曼编码（标准版）  （hard）

	包含编码器和解码器，编码器输入一个任意文件（不一定是文本文件），输出经编码压缩后的文件。
	
	解码器输入压缩文件，输出原文件。

3. 大数加法  （easy）

	输入两个任意大的数，输出其和

4. 大数乘法  （moderate）

5. 实现Dijkstra算法  （moderate）

6. 图的广度优先与深度优先搜索  （easy）

7. 快速排序与归并排序  （easy）

8. 词频统计  （easy）

	输入一个普通英文小说，输出每个单词的出现次数。用map实现。

9. recursion （hard）

	输入 n（1-10），输出以下内容：
```
	![](https://raw.githubusercontent.com/igoingdown/public-notes/master/images/recursion_problem_image.png)
```



### 函数重载

	函数重载的条件是没有歧义，有二义性的代码是不可以重载的

### delete操作
使用delete语句时要注意delete 一个对象后要立马对该对象赋值（赋为NULL）且在delete之前要判断该对象是否为空，这样可防止对自由存储区的破坏（两次使用delete语句释放同一指针可能对存储区造成破坏）故delete语句经常这样写：

```cpp
if(ptr)
	delete ptr;
ptr=NULL;
```

### 默认实参

函数声明中（不是函数定义中！函数声明中有默认实参，函数定义中就不用写默认实参了）的形参列表里，若一个形参设置了默认实参，则它之后的所有形参都必须设置默认实参。

### C风格字符串和string的比较

C风格字符串必须要以`'\0'`**（杠铃）** 结尾，是`const char*`类型，不可以动态变化，而`string`类型是标准库类型和我们自己定义的类没有太大区别，可以动态变化，很方便。但是为了兼容C 的程序，一些地方必须用C风格字符串，例如文件流对象建立是绑定的文件的文件名必须是C风格字符串

# debug模式与release模式

Release模式下，编译器会猜测用户代码的实际意义来改写代码已生成更加高效的汇编代码，可以通过快速启动反汇编观察实际的汇编代码以验证。而debug模式下，编译器会严格按照用户的指示来生成汇编代码，也因此debug模式下运行速度要慢的多

### 书写规范

1.  注意缩进，操作符的操作数之间要留空格（各种留空格，可参考QT的示例代码）
2.  注意段划分，各段之间要空余一行

### 用指针固定数组基址

访问二维数组`array[100][100]`，实验发现

方法1：

```cpp
for (i = 1 : 100)
  ptr = 行首地址
  for (j = 1 : 100)
    *(ptr++)
```
比方法2：
```cpp
for (i = 1:100)
  for (j = 1:100)
    array[i][j]
```
**快得多**

### 类的关系

1.  没有关系：绝大多数时候就是这种关系，由封装的特点决定！
2.  继承：本质是“是”的关系，在继承之前先问一下这两个类之间是不是“是”的关系，继承主要是为了实现代码重用。
3.  复合（组合）：即包含或者知道的关系，包含即一个类的对象作为另一个类的成员变量，这种情况很常见！但是也有一些情况下，如狗主人和狗的关系，狗主人和狗类是相互包含的，这种互相包含的情况可用指针来实现，这就是知道的关系。

### 继承与派生

1.  子类继承基类时，为子类分配的内存空间中完整地包括了基类的所有成员变量的所占空间和子类自己独有的成员变量的所占空间，这是因为构造子类对象时必须先构造出基类对象，然后再添加内容，但是基类的private成员不可访问（上锁）！
2.  子类对象构造过程中，基类、子类的类成员和子类的构造函数依次执行，且先构造后析构。
3.  C++的默认继承方式是私有继承！
4.  C++的public继承就是“is-a”的关系，就是说基类的所有接口在子类中都应该有效！如果发生非virtual函数发生在基类和子类中发生重名，必须使用using base class::function()导入！这就是C++的public继承的含义。
5.  C++的private继承是由……实现（is-implemented-in-terms-of）的含义，或者说“has-a”的意思。

### 虚函数
1.  虚函数的声明中的virtual关键字放在最前面，在定义中不加virtual关键字。
2.  构造函数和静态成员函数不能用virtual关键字。
3.  多态对间接派生关系依然适用。
4.  纯虚函数就是连函数体都没有的函数，故将函数赋值为0（函数指针!!!）。
5.  用基类的指针数组存放指向派生类对象的指针，遍历该数组就可以通过多态自动实现对派生类对象的访问，这在实际编程中很常用！
6.  在非构造函数和非析构函数中调用虚函数也是多态！
7.  派生类中和基类的  虚函数同函数名同参数表的函数即使不加virtual关键字也自动被转化成虚函数。
8.  虚函数表是编译器自己加的，用于“动态联编”，即多态的一种实现方式。因此这些类的成员变量中会多出一个指向该虚函数表的指针（占四个字节）。虽然这样很方便但是增加了时间和空间上的开销。
9.  如果一个类中有虚函数，则一定要把析构函数设置为虚函数！
10.  C++的虚函数的访问靠虚函数表实现：每个对象在其内存空间的最开始的位置保存一个指向虚函数表起始地址的指针（这样可以保证访问虚函数有最好的性能），这个指针就是虚指针（虚函数指针），虚函数表中的虚函数（的起始地址）连续存放，最后有结束标志符。
11.  Interface class或者reference class需要将其接口全部设为虚函数或者纯虚函数，以实现接口和实现的分离。
2. 虚函数示例代码
```cpp
#include <iostream>
#include <vector>

using namespace std;


class C1{
private:
	int a;
	virtual void f1() {
		cout << "c1" << endl;
	}

	void f2() {
		cout << "f2" << endl;
	}

	void f2() const {
		cout << "f2 const" << endl;
	}
	// 两个f2构成重载是因为隐藏的this指针不同补全之后分别为
	// void f2(C1 *const this)
	// void f2(const C1 *const this)

	void f10(const int* a) {
		cout << "f10" << endl;
	}

	void f10(int *a) {
		cout << "f10 no const" << endl;
	}

	void f5(int &a) {
		cout << "f5" << endl;
	}
	void f5(const int &a) {
		cout << "f5 const" << endl;
	}

	// 同f2,f10和f5也属于正确的重载

};

class C: public C1 {
	void f3() {
		cout << "f3" << endl;
	}
};



int main() {
	C1 c;
	int a = 10;
	cout << sizeof(a) << endl;   // 4
	cout << sizeof(c) << endl;   // 16, 内存以8B对齐，有虚函数表指针vptr(指向vtbl)，
	//  vtbl是类的，不是对象的，因为vptr是类的，不是对象的!
	// 通过对象实例的地址得到虚函数表，是因为 vptr 指针位于对象实例的最前面
	//     这是由编译器决定的，主要是为了保证取到虚函数表有最高的性能——如果有多层继承或是多重继承的情况下
	return 0;
}
```



### vector使用下标访问注意

在使用vector的下标访问vector的元素时，必须先使用size()函数确定一下size的值，以确保使用下标访问vector时不会发生越界。也可以使用at代替传统下标访问，因为at会自动检查数组是否越界！


----
## char型数据判断类型  

### 判断ASCII字符是否为十进制数字

```cpp
isdigit(int c)
```
### 判断ASCII字符是否为字母

```cpp
isalpah(int c)
```
### 判读ASCII是否为字符或十进制数

```cpp
isalnum(int c)
```


